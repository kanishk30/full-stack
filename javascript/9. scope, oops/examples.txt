==========================================
üß† JavaScript: Execution Context, Hoisting, TDZ
==========================================

‚úÖ 1. EXECUTION CONTEXT (EC)

The Execution Context is the environment in which JavaScript code is evaluated and executed.

üîÑ Stages:
----------------------
1. Creation Phase:
   - Memory is allocated for variables and functions.
   - var ‚Üí hoisted and initialized as undefined
   - let/const ‚Üí hoisted but not initialized (in TDZ)
   - Function declarations ‚Üí hoisted with full definition

2. Execution Phase:
   - Variables are assigned actual values.
   - Functions are executed.

üß© Components of Execution Context:
- Variable Environment
- Lexical Environment (scope)
- This binding

==========================================
‚úÖ 2. HOISTING

Hoisting is JavaScript‚Äôs behavior of moving declarations to the top of their scope before code execution.

| Declaration | Hoisted | Initialized | TDZ Applies | Can Re-declare |
|-------------|---------|-------------|-------------|----------------|
| var         | Yes     | Yes (undefined) | No        | Yes            |
| let/const   | Yes     | No          | Yes         | No             |
| function    | Yes     | Yes (full)  | No          | Yes            |

Example:
----------------------
console.log(x);     // undefined
console.log(y);     // ‚ùå ReferenceError
console.log(foo()); // ‚úÖ "Hello from foo"

var x = 10;
let y = 20;

function foo() {
    return "Hello from foo";
}

==========================================
‚úÖ 3. TEMPORAL DEAD ZONE (TDZ)

The Temporal Dead Zone is the time between when a variable is hoisted and when it is initialized.

TDZ applies to let and const:
----------------------
{
    console.log(myLet); // ‚ùå ReferenceError
    let myLet = 5;
}

üß† TDZ is NOT a memory location. It is a logical (language-level) concept.

Analogy:
A seat (variable) is reserved in memory, but until someone sits (initializes), no one can even touch it ‚Äî or you'll get thrown out (ReferenceError).

Example comparing var and let:
----------------------
console.log(a); // ‚úÖ undefined (var is hoisted and initialized)
console.log(b); // ‚ùå ReferenceError (let is in TDZ)

var a = 10;
let b = 20;

==========================================
üß† MEMORY SNAPSHOT

Creation Phase:
---------------
a ‚Üí undefined
b ‚Üí <uninitialized> (TDZ)

Execution Phase:
---------------
Line 1: console.log(a) ‚Üí ‚úÖ prints undefined
Line 2: console.log(b) ‚Üí ‚ùå ReferenceError
Line 3: var a = 10     ‚Üí a initialized to 10
Line 4: let b = 20     ‚Üí b exits TDZ and is initialized

==========================================
üìä EXECUTION TIMELINE DIAGRAM

| Time | Code Line     | State                        |
|------|---------------|------------------------------|
| t0   | (start)       | a: undefined, b: TDZ         |
| t1   | console.log(a)| ‚úÖ prints undefined           |
| t2   | console.log(b)| ‚ùå ReferenceError (in TDZ)    |
| t3   | a = 10        | ‚úÖ a: 10                      |
| t4   | b = 20        | ‚úÖ b: 20, TDZ ends            |

==========================================
üì¶ MEMORY STATE

Before execution:
----------------------
a: undefined
b: TDZ (cannot access)

After line 1:
----------------------
a: undefined (printed)
b: TDZ

After line 2:
----------------------
üí• ReferenceError for b (still in TDZ)

After line 3 & 4:
----------------------
a: 10
b: 20

==========================================
üß† CALL STACK (EC Stack)

Example:

function outer() {
    let a = 10;
    function inner() {
        console.log(a);
    }
    inner();
}
outer();

Call Stack:

Global EC
  ‚Üì
outer() EC
  ‚Üì
inner() EC

==========================================
‚úÖ SUMMARY

- var: hoisted + initialized to undefined
- let/const: hoisted but not initialized ‚Üí TDZ applies
- TDZ is a logical time-based restriction
- Accessing let/const in TDZ ‚Üí ReferenceError
- Function declarations are fully hoisted
- Execution Context manages memory + scope + this binding
